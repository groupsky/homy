name: Automations Tests

on:
  push:
    paths:
      - 'docker/automations/**'
      - '.github/workflows/automations-tests.yml'
  pull_request:
    paths:
      - 'docker/automations/**'
      - '.github/workflows/automations-tests.yml'

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.nvmrc.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        
      - name: Read Node version from .nvmrc
        id: nvmrc
        run: |
          NODE_VERSION=$(cat docker/automations/.nvmrc)
          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "Node version from .nvmrc: $NODE_VERSION"
          
      - name: Check Node version consistency
        run: |
          NODE_VERSION=$(cat docker/automations/.nvmrc)
          DOCKERFILE_VERSION=$(grep "FROM node:" docker/automations/Dockerfile | cut -d: -f2 | cut -d- -f1)
          WORKFLOW_VERSION=$(grep -A 10 "node-version-file:" .github/workflows/automations-tests.yml | head -1 | grep -o "[0-9]*" || echo "$NODE_VERSION")
          
          echo "Node version in .nvmrc: $NODE_VERSION"
          echo "Node version in Dockerfile: $DOCKERFILE_VERSION"
          echo "Expected workflow version: $NODE_VERSION"
          
          if [ "$NODE_VERSION" != "$DOCKERFILE_VERSION" ]; then
            echo "ERROR: Node version mismatch between .nvmrc ($NODE_VERSION) and Dockerfile ($DOCKERFILE_VERSION)"
            exit 1
          fi
          
          echo "✅ All Node versions are consistent"

  test:
    runs-on: ubuntu-latest
    needs: version-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        
      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: 'docker/automations/.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'docker/automations/package-lock.json'
          
      - name: Install dependencies
        working-directory: docker/automations
        run: npm ci
        
      - name: Run tests
        working-directory: docker/automations
        run: npm test
        
      - name: Run test coverage
        working-directory: docker/automations
        run: npm test -- --coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: docker/automations/coverage/lcov.info
          directory: docker/automations/coverage
          flags: automations
          name: automations-coverage
          fail_ci_if_error: false

  docker-healthcheck:
    runs-on: ubuntu-latest
    needs: [version-check, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        
      - name: Build Docker image
        run: |
          docker build -t automations-test docker/automations/
          
      - name: Start container with healthcheck
        run: |
          docker run -d --name automations-healthcheck \
            -e MQTT_BROKER=mqtt://test-broker \
            -e CONFIG=/usr/src/app/test-config.js \
            automations-test
            
      - name: Create test configuration
        run: |
          docker exec automations-healthcheck sh -c 'cat > test-config.js << EOF
          module.exports = {
            mqtt: {
              broker: process.env.MQTT_BROKER || "mqtt://broker:1883",
              clientId: "automations-test"
            },
            bots: []
          }
          EOF'
            
      - name: Verify container is running
        run: |
          # Wait for container to start properly
          sleep 10
          
          # Check container is still running
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' automations-healthcheck)
          echo "Container status: $CONTAINER_STATUS"
          
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "ERROR: Container is not running"
            docker logs automations-healthcheck
            exit 1
          fi
          
          echo "✅ Container is running successfully"
          
      - name: Cleanup
        if: always()
        run: |
          docker stop automations-healthcheck || true
          docker rm automations-healthcheck || true
          docker rmi automations-test || true