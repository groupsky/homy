name: MQTT InfluxDB Sunseeker Tests

on:
  push:
    paths:
      - 'docker/mqtt-influx-sunseeker/**'
      - '.github/workflows/mqtt-influx-sunseeker-tests.yml'
  pull_request:
    paths:
      - 'docker/mqtt-influx-sunseeker/**'
      - '.github/workflows/mqtt-influx-sunseeker-tests.yml'

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.nvmrc.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        
      - name: Read Node version from .nvmrc
        id: nvmrc
        run: |
          NODE_VERSION=$(cat docker/mqtt-influx-sunseeker/.nvmrc)
          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "Node version from .nvmrc: $NODE_VERSION"
          
      - name: Check Node version consistency
        run: |
          NODE_VERSION=$(cat docker/mqtt-influx-sunseeker/.nvmrc)
          DOCKERFILE_VERSION=$(grep "FROM node:" docker/mqtt-influx-sunseeker/Dockerfile | cut -d: -f2 | cut -d- -f1)
          WORKFLOW_VERSION=$(grep -A 10 "node-version-file:" .github/workflows/mqtt-influx-sunseeker-tests.yml | head -1 | grep -o "[0-9]*" || echo "$NODE_VERSION")
          
          echo "Node version in .nvmrc: $NODE_VERSION"
          echo "Node version in Dockerfile: $DOCKERFILE_VERSION"
          echo "Expected workflow version: $NODE_VERSION"
          
          if [ "$NODE_VERSION" != "$DOCKERFILE_VERSION" ]; then
            echo "ERROR: Node version mismatch between .nvmrc ($NODE_VERSION) and Dockerfile ($DOCKERFILE_VERSION)"
            exit 1
          fi
          
          echo "✅ All Node versions are consistent"

  test:
    runs-on: ubuntu-latest
    needs: version-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: 'docker/mqtt-influx-sunseeker/.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'docker/mqtt-influx-sunseeker/package-lock.json'
          
      - name: Install dependencies
        working-directory: docker/mqtt-influx-sunseeker
        run: npm ci
        
      - name: Run tests
        working-directory: docker/mqtt-influx-sunseeker
        run: npm test
        
      - name: Run test coverage
        working-directory: docker/mqtt-influx-sunseeker
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: docker/mqtt-influx-sunseeker/coverage/lcov.info
          directory: docker/mqtt-influx-sunseeker/coverage
          flags: mqtt-influx-sunseeker
          name: mqtt-influx-sunseeker-coverage
          fail_ci_if_error: false

  docker-healthcheck:
    runs-on: ubuntu-latest
    needs: [version-check, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
      - name: Build Docker image
        run: |
          docker build -t mqtt-influx-sunseeker-test docker/mqtt-influx-sunseeker/
          
      - name: Start container with healthcheck
        run: |
          docker run -d --name mqtt-influx-sunseeker-healthcheck \
            -e MQTT_USERNAME=test_user_for_ci \
            -e MQTT_PASSWORD_FILE=/dev/null \
            -e MQTT_DEVICE_ID=test_device_for_ci \
            -e MQTT_APP_ID=test_app_for_ci \
            -e INFLUX_URL=http://test-influx:8086 \
            -e INFLUX_TOKEN_FILE=/dev/null \
            -e INFLUX_ORG=test_org \
            -e INFLUX_BUCKET=test_bucket \
            mqtt-influx-sunseeker-test
            
      - name: Verify Docker healthcheck status
        run: |
          # Wait for healthcheck to run a few times
          sleep 35
          
          # Check container is marked as healthy or unhealthy (not starting)
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' mqtt-influx-sunseeker-healthcheck)
          echo "Docker health status: $HEALTH_STATUS"
          
          # For this service, we expect it to be unhealthy in CI since MQTT/InfluxDB aren't available
          # But the healthcheck should run and return a status (not crash)
          if [ "$HEALTH_STATUS" = "starting" ]; then
            echo "ERROR: Healthcheck is still starting after 35 seconds"
            docker inspect --format='{{json .State.Health}}' mqtt-influx-sunseeker-healthcheck | jq .
            docker logs mqtt-influx-sunseeker-healthcheck
            exit 1
          fi
          
          echo "✅ Docker healthcheck is working correctly (status: $HEALTH_STATUS)"
          
      - name: Test healthcheck script directly
        run: |
          # Test the healthcheck script returns proper exit codes
          docker exec mqtt-influx-sunseeker-healthcheck node health-check.js || echo "Expected failure in CI environment"
          
          # Verify the script exists and is executable
          docker exec mqtt-influx-sunseeker-healthcheck ls -la health-check.js
          
          echo "✅ Healthcheck script is properly configured"
          
      - name: Cleanup
        if: always()
        run: |
          docker stop mqtt-influx-sunseeker-healthcheck || true
          docker rm mqtt-influx-sunseeker-healthcheck || true
          docker rmi mqtt-influx-sunseeker-test || true