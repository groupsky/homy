version: '3'
services:

  ingress:
    build: docker/nginx
    restart: unless-stopped
    container_name: $INGRESS_NAME
    networks:
      ingress:
      dmz:
        ipv4_address: $INGRESS_ADDRESS
    volumes:
      - ./data/ingress:/etc/nginx/conf.d:ro

  ingressgen:
    build: docker/dockergen
    restart: unless-stopped
    command: -notify-sighup $INGRESS_NAME -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    network_mode: none
    environment:
      - TARGET_CONTAINER=$INGRESS_NAME
    volumes:
      - ./data/ingress:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./config/ingressgen/templates:/etc/docker-gen/templates:ro

  vpn:
    build: docker/wireguard
    restart: unless-stopped
    networks:
      - dmz
      - test-internal
      - test-internal2
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Sofia
      - SERVERURL=$VPN_PUBLIC_URL
      - SERVERPORT=$VPN_PUBLIC_PORT
      - PEERS=$VPN_PEERS
      - PEERDNS=auto
      - INTERNAL_SUBNET=$VPN_SUBNET
      - ALLOWEDIPS=$INGRESS_SUBNET
    volumes:
      - /lib/modules:/lib/modules
      - ./data/wireguard:/config
      - ./config/wireguard/templates:/config/templates:ro
    ports:
      - "${VPN_PUBLIC_PORT}:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1

  broker:
    build: docker/mosquitto
    restart: unless-stopped
    networks:
      - automation
      - dmz
    ports:
      - "1883:1883"

  whoami:
    image: jwilder/whoami
    restart: unless-stopped
    networks:
      - ingress
    environment:
      - VIRTUAL_HOST=whoami.${DOMAIN}
      - VIRTUAL_PORT=8000

  nodered:
    build: docker/nodered
    restart: unless-stopped
    networks:
      - automation
      - ingress
      # needed to connect to broadcom rm+ pro ir remote
      - egress
    environment:
      - VIRTUAL_HOST=nodered.${DOMAIN}
      - VIRTUAL_PORT=1880
    volumes:
      - ./data/nodered:/data
      - ./config/nodered/flows.json:/data/flows.json:ro
      - ./config/nodered/package.json:/data/package.json:ro
      - ./config/nodered/settings.js:/data/settings.js:ro

  ha:
    build: docker/homeassistant
    restart: unless-stopped
    networks:
      - automation
      - ingress
      - egress
    environment:
      - TZ=Europe/Sofia
      - VIRTUAL_HOST=ha.${DOMAIN}
      - VIRTUAL_PORT=8123
    volumes:
      - ./data/home-assistant:/config
      - ./config/home-assistant/configuration.yaml:/config/configuration.yaml:ro
      - ./config/home-assistant/configuration:/config/configuration:ro
      - /etc/localtime:/etc/localtime:ro

  mongo:
    build: docker/mongo
    restart: unless-stopped
    networks:
      - automation
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=power
    volumes:
      - ./data/mongo:/data/db

  mongo-express:
    build: docker/mongo-express
    restart: unless-stopped
    networks:
      - automation
      - ingress
    environment:
      - TZ=Europe/Sofia
      - VIRTUAL_HOST=me.${DOMAIN}
      - VIRTUAL_PORT=8081
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}

  main-power:
    build: docker/modbus-serial
    restart: unless-stopped
    privileged: true
    networks:
      - automation
    environment:
      - DATABASE=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/power?authSource=admin
      - COLLECTION=main
      - CONFIG=/etc/config.js
      - BROKER=mqtt://broker
      - TOPIC=/modbus/main/{name}/reading
    volumes:
      - /dev/bus/usb:/dev/bus/usb
      - ./config/modbus-serial/main.config.js:/etc/config.js:ro

  secondary-power:
    build: docker/modbus-serial
    restart: unless-stopped
    privileged: true
    networks:
      - automation
    environment:
      - DATABASE=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/power?authSource=admin
      - COLLECTION=secondary
      - CONFIG=/etc/config.js
      - BROKER=mqtt://broker
      - TOPIC=/modbus/secondary/{name}/reading
    volumes:
      - /dev/bus/usb:/dev/bus/usb
      - ./config/modbus-serial/secondary.config.js:/etc/config.js:ro

  influxdb:
    build: docker/influxdb
    restart: unless-stopped
    networks:
      - automation
    environment:
      - TZ=Europe/Sofia
      - INFLUXDB_DB=${INFLUX_DATABASE}
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - INFLUXDB_USER=user
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_USER_PASSWORD}
      - INFLUXDB_READ_USER=reader
      - INFLUXDB_READ_USER_PASSWORD=${INFLUXDB_READ_USER_PASSWORD}
      - INFLUXDB_WRITE_USER=writer
      - INFLUXDB_WRITE_USER_PASSWORD=${INFLUXDB_WRITE_USER_PASSWORD}
    volumes:
      - ./config/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ./config/influxdb/init:/docker-entrypoint-initdb.d:ro
      - ./data/influxdb:/var/lib/influxdb
      - /etc/localtime:/etc/localtime:ro

  mqtt-consumer:
    build: docker/telegraf
    restart: unless-stopped
    networks:
      - automation
      - egress
    environment:
      - MQTT_CLIENT_ID=influxdb-consumer
      - INFLUX_DATABASE=${INFLUX_DATABASE}
      - INFLUX_OUTPUT_USER=writer
      - INFLUX_OUTPUT_USER_PASSWORD=${INFLUXDB_WRITE_USER_PASSWORD}
    volumes:
      - ./config/telegraf/mqtt-consumer.conf:/etc/telegraf/telegraf.conf:ro
    healthcheck:
      test: wget localhost:8080 -q -O - > /dev/null 2>&1

  grafana:
    build: docker/grafana
    restart: unless-stopped
    networks:
      - automation
      - ingress
    environment:
      - TZ=Europe/Sofia
      - VIRTUAL_HOST=grafana.${DOMAIN}
      - VIRTUAL_PORT=3000
      - INFLUXDB_DATABASE=${INFLUX_DATABASE}
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_READ_USER_PASSWORD}
    volumes:
      - ./config/grafana/config.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./data/grafana:/var/lib/grafana
      - /etc/localtime:/etc/localtime:ro
    user: ${UID}:${GID}

  mqtt-mongo-primary:
    build: docker/mqtt-mongo
    restart: unless-stopped
    networks:
      - automation
      - egress
    environment:
      - DATABASE=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/power?authSource=admin
      - COLLECTION=primary
      - BROKER=mqtt://192.168.0.2
      - TOPIC=/modbus/main/+/reading
      - MQTT_CLIENT_ID=mqtt-mongo-primary

  mqtt-influx-primary:
    build: docker/mqtt-influx
    restart: unless-stopped
    networks:
      - automation
      - egress
    environment:
      - BROKER=mqtt://192.168.0.2
      - TOPIC=/modbus/main/+/reading
      - MQTT_CLIENT_ID=mqtt-influx-primary
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_USERNAME=writer
      - INFLUX_PASSWORD=${INFLUXDB_WRITE_USER_PASSWORD}
      - INFLUX_DATABASE=${INFLUX_DATABASE}
      - TAGS={"bus":"primary"}

  mqtt-influx-secondary:
    build: docker/mqtt-influx
    restart: unless-stopped
    networks:
      - automation
      - egress
    environment:
      - BROKER=mqtt://192.168.0.2
      - TOPIC=/modbus/secondary/+/reading
      - MQTT_CLIENT_ID=mqtt-influx-secondary
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_USERNAME=writer
      - INFLUX_PASSWORD=${INFLUXDB_WRITE_USER_PASSWORD}
      - INFLUX_DATABASE=${INFLUX_DATABASE}
      - TAGS={"bus":"secondary"}

networks:
  # internal for the automation services - mqtt, node red, ah
  automation:
    internal: true
  # ingress proxy and exposed services
  ingress:
    internal: true
  # egress for containers needing access to external networks
  egress:
  # vpn, proxy
  dmz:
    ipam:
      config:
        - subnet: $INGRESS_SUBNET
  # internal networks for testing vpn access
  test-internal:
    internal: true
  test-internal2:
    internal: true
