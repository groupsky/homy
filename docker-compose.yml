version: '3.8'
services:

  ingress:
    build: docker/nginx
    depends_on:
      - ingressgen
    restart: on-failure
    container_name: $INGRESS_NAME
    networks:
      ingress:
      dmz:
        ipv4_address: $INGRESS_ADDRESS
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${INGRESS_DATA_PATH}:/etc/nginx/conf.d:ro

  ingressgen:
    build: docker/dockergen
    restart: unless-stopped
    command: -notify-sighup $INGRESS_NAME -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    network_mode: none
    security_opt:
      - no-new-privileges:true
    configs:
      - source: ingressgen_template_nginx
        target: /etc/docker-gen/templates/nginx.tmpl
    environment:
      - TARGET_CONTAINER=$INGRESS_NAME
    volumes:
      - ${INGRESS_DATA_PATH}:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # fallback in case configs are not supported
      - ${INGRESSGEN_TEMPLATE_NGINX_FILE}:/etc/docker-gen/templates/nginx.tmpl:ro

  vpn:
    build: docker/wireguard
    restart: unless-stopped
    networks:
      - dmz
      - test-internal
      - test-internal2
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    configs:
      - source: vpn_template_peer
        target: /config/templates/peer.conf
      - source: vpn_template_server
        target: /config/templates/server.conf
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SERVERURL=$VPN_PUBLIC_URL
      - SERVERPORT=$VPN_PUBLIC_PORT
      - PEERS=$VPN_PEERS
      - PEERDNS=auto
      - INTERNAL_SUBNET=$VPN_SUBNET
      - ALLOWEDIPS=$INGRESS_SUBNET
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /lib/modules:/lib/modules
      - ${VPN_DATA_PATH}:/config
      - ${VPN_TEMPLATE_PEER_FILE}:/config/templates/peer.conf:ro
      - ${VPN_TEMPLATE_SERVER_FILE}:/config/templates/server.conf:ro
    ports:
      - "${VPN_PUBLIC_PORT}:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1

  broker:
    build: docker/mosquitto
    restart: unless-stopped
    networks:
      - automation
      - dmz
    security_opt:
      - no-new-privileges:true
    ports:
      - "1883:1883"

  nodered:
    build: docker/nodered
    depends_on:
      - broker
    restart: unless-stopped
    networks:
      - automation
      - ingress
      # needed to connect to broadcom rm+ pro ir remote
      - egress
    security_opt:
      - no-new-privileges:true
    configs:
      - source: nodered_flows
        target: /data/flows.json
      - source: nodered_package
        target: /data/package.json
      - source: nodered_settings
        target: /data/settings.js
    secrets:
      - nodered_credentials_key
    environment:
      - CREDENTIALS_KEY_FILE=/run/secrets/nodered_credentials_key
      - VIRTUAL_HOST=${NODERED_DOMAIN}
      - VIRTUAL_PORT=1880
    volumes:
      - ${NODERED_DATA}:/data
      - ${NODERED_CONFIG_FLOWS_FILE}:/data/flows.json:ro
      - ${NODERED_CONFIG_PACKAGE_FILE}:/data/package.json:ro
      - ${NODERED_CONFIG_SETTINGS_FILE}:/data/settings.js:ro

  ha:
    build: docker/homeassistant
    depends_on:
      - broker
    restart: unless-stopped
    networks:
      - automation
      - ingress
      - egress
    security_opt:
      - no-new-privileges:true
    configs:
      - source: homeassistant_configuration
        target: /config/configuration.yaml
      - source: homeassistant_automations
        target: /config/configuration/automations.yaml
      - source: homeassistant_customize
        target: /config/configuration/customize.yaml
      - source: homeassistant_groups
        target: /config/configuration/groups.yaml
      - source: homeassistant_scenes
        target: /config/configuration/scenes.yaml
      - source: homeassistant_scripts
        target: /config/configuration/scripts.yaml
    environment:
      - TZ=${TZ}
      - VIRTUAL_HOST=${HOMEASSISTANT_DOMAIN}
      - VIRTUAL_PORT=8123
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${HOMEASSISTANT_DATA_PATH}:/config
      - ${HOMEASSISTANT_CONFIG_CONFIGURATION_FILE}:/config/configuration.yaml:ro
      - ${HOMEASSISTANT_CONFIG_AUTOMATIONS_FILE}:/config/configuration/automations.yaml:ro
      - ${HOMEASSISTANT_CONFIG_CUSTOMIZE_FILE}:/config/configuration/customize.yaml:ro
      - ${HOMEASSISTANT_CONFIG_GROUPS_FILE}:/config/configuration/groups.yaml:ro
      - ${HOMEASSISTANT_CONFIG_SCENES_FILE}:/config/configuration/scenes.yaml:ro
      - ${HOMEASSISTANT_CONFIG_SCRIPTS_FILE}:/config/configuration/scripts.yaml:ro

  mongo:
    build: docker/mongo
    restart: unless-stopped
    networks:
      - automation
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_root_password
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - ${MONGO_DATA_PATH}:/data

  mongo-express:
    build: docker/mongo-express
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - automation
      - ingress
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_username
      - mongo_root_password
      - mongo_express_username
      - mongo_express_password
    environment:
      - TZ=${TZ}
      - VIRTUAL_HOST=${MONGO_EXPRESS_DOMAIN}
      - VIRTUAL_PORT=8081
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME_FILE=/run/secrets/mongo_root_username
      - ME_CONFIG_MONGODB_ADMINPASSWORD_FILE=/run/secrets/mongo_root_password
      - ME_CONFIG_BASICAUTH_USERNAME_FILE=/run/secrets/mongo_express_username
      - ME_CONFIG_BASICAUTH_PASSWORD_FILE=/run/secrets/mongo_express_password
    volumes:
      - /etc/localtime:/etc/localtime:ro

  main-power:
    build: docker/modbus-serial
    depends_on:
      - broker
      - mongo
    restart: unless-stopped
    privileged: true
    networks:
      - automation
    security_opt:
      - no-new-privileges:true
    configs:
      - source: main_power
        target: /etc/config.js
    secrets:
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGODB_URL=mongodb://mongo:27017/${MONGO_DATABASE}?authSource=admin
      - MONGODB_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGODB_PASSWORD_FILE=/run/secrets/mongo_root_password
      - COLLECTION=main
      - CONFIG=/etc/config.js
      - BROKER=mqtt://broker
      - TOPIC=/modbus/main/{name}/reading
    volumes:
      - /dev/bus/usb:/dev/bus/usb
      - ${MAIN_POWER_CONFIG_FILE}:/etc/config.js:ro

  secondary-power:
    build: docker/modbus-serial
    depends_on:
      - broker
      - mongo
    restart: unless-stopped
    privileged: true
    networks:
      - automation
    security_opt:
      - no-new-privileges:true
    configs:
      - source: secondary_power
        target: /etc/config.js
    secrets:
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGODB_URL=mongodb://mongo:27017/${MONGO_DATABASE}?authSource=admin
      - MONGODB_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGODB_PASSWORD_FILE=/run/secrets/mongo_root_password
      - COLLECTION=secondary
      - CONFIG=/etc/config.js
      - BROKER=mqtt://broker
      - TOPIC=/modbus/secondary/{name}/reading
    volumes:
      - /dev/bus/usb:/dev/bus/usb
      - ${SECONDARY_POWER_CONFIG_FILE}:/etc/config.js:ro

  tetriary-power:
    build: docker/modbus-serial
    depends_on:
      - broker
      - mongo
    restart: unless-stopped
    privileged: true
    networks:
      - automation
    security_opt:
      - no-new-privileges:true
    configs:
      - source: tetriary_power
        target: /etc/config.js
    secrets:
      - influxdb_write_user
      - influxdb_write_user_password
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGODB_URL=mongodb://mongo:27017/${MONGO_DATABASE}?authSource=admin
      - MONGODB_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGODB_PASSWORD_FILE=/run/secrets/mongo_root_password
      - COLLECTION=tetriary
      - CONFIG=/etc/config.js
      - BROKER=mqtt://broker
      - TOPIC=/modbus/tetriary/{name}/reading
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME_FILE=/run/secrets/influxdb_write_user
      - INFLUXDB_PASSWORD_FILE=/run/secrets/influxdb_write_user_password
      - INFLUXDB_DATABASE=${INFLUXDB_DATABASE}
      - INFLUXDB_TAGS={"bus":"tetriary"}
      - INFLUXDB_MEASUREMENT=sdm630raw
    volumes:
      - /dev/bus/usb:/dev/bus/usb
      - ${TETRIARY_POWER_CONFIG_FILE}:/etc/config.js:ro

  influxdb:
    build: docker/influxdb
    restart: unless-stopped
    networks:
      - automation
    security_opt:
      - no-new-privileges:true
    configs:
      - source: influxdb_config
        target: /etc/influxdb/influxdb.conf
    secrets:
      - influxdb_admin_user
      - influxdb_admin_password
      - influxdb_user
      - influxdb_user_password
      - influxdb_read_user
      - influxdb_read_user_password
      - influxdb_write_user
      - influxdb_write_user_password
    environment:
      - TZ=${TZ}
      - INFLUXDB_DB=${INFLUXDB_DATABASE}
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER_FILE=/run/secrets/influxdb_admin_user
      - INFLUXDB_ADMIN_PASSWORD_FILE=/run/secrets/influxdb_admin_password
      - INFLUXDB_USER_FILE=/run/secrets/influxdb_user
      - INFLUXDB_USER_PASSWORD_FILE=/run/secrets/influxdb_user_password
      - INFLUXDB_READ_USER_FILE=/run/secrets/influxdb_read_user
      - INFLUXDB_READ_USER_PASSWORD_FILE=/run/secrets/influxdb_read_user_password
      - INFLUXDB_WRITE_USER_FILE=/run/secrets/influxdb_write_user
      - INFLUXDB_WRITE_USER_PASSWORD_FILE=/run/secrets/influxdb_write_user_password
    volumes:
      - ${INFLUXDB_CONFIG_FILE}:/etc/influxdb/influxdb.conf:ro
      - ./data/influxdb:/var/lib/influxdb
      - /etc/localtime:/etc/localtime:ro

  grafana:
    build: docker/grafana
    depends_on:
      - influxdb
    restart: unless-stopped
    networks:
      - automation
      - ingress
    security_opt:
      - no-new-privileges:true
    configs:
      - source: grafana_config
        target: /etc/grafana/grafana.ini
      - source: grafana_datasource_influxdb
        target: /etc/grafana/provisioning/datasources/influxdb.yaml
    secrets:
      - influxdb_read_user
      - influxdb_read_user_password
    environment:
      - TZ=${TZ}
      - VIRTUAL_HOST=grafana.${DOMAIN}
      - VIRTUAL_PORT=3000
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_DATABASE=${INFLUXDB_DATABASE}
      - INFLUXDB_USER_FILE=/run/secrets/influxdb_read_user
      - INFLUXDB_USER_PASSWORD_FILE=/run/secrets/influxdb_read_user_password
    volumes:
      - ${GRAFANA_CONFIG_FILE}:/etc/grafana/grafana.ini:ro
      - ${GRAFANA_CONFIG_DATASOURCE_INFLUXDB_FILE}:/etc/grafana/provisioning/datasources/influxdb.yaml:ro
      - ${GRAFANA_DATA_PATH}:/var/lib/grafana
      - /etc/localtime:/etc/localtime:ro
    user: ${PUID}:${PGID}

  mqtt-mongo-history:
    build: docker/mqtt-mongo
    depends_on:
      - broker
      - mongo
    restart: unless-stopped
    networks:
      - automation
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGODB_URL=mongodb://mongo:27017/${MONGO_DATABASE}?authSource=admin
      - MONGODB_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGODB_PASSWORD_FILE=/run/secrets/mongo_root_password
      - COLLECTION=history
      - BROKER=mqtt://broker
      - TOPIC=/homy/br1/temp
      - MQTT_CLIENT_ID=mqtt-mongo-history

  mqtt-influx-primary:
    build: docker/mqtt-influx
    depends_on:
      - broker
      - influxdb
    restart: unless-stopped
    networks:
      - automation
      - egress
    security_opt:
      - no-new-privileges:true
    secrets:
      - influxdb_write_user
      - influxdb_write_user_password
    environment:
      - BROKER=mqtt://broker
      - TOPIC=/modbus/main/+/+
      - MQTT_CLIENT_ID=mqtt-influx-primary
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME_FILE=/run/secrets/influxdb_write_user
      - INFLUXDB_PASSWORD_FILE=/run/secrets/influxdb_write_user_password
      - INFLUXDB_DATABASE=${INFLUXDB_DATABASE}
      - TAGS={"bus":"primary"}

  mqtt-influx-secondary:
    build: docker/mqtt-influx
    depends_on:
      - broker
      - influxdb
    restart: unless-stopped
    networks:
      - automation
      - egress
    security_opt:
      - no-new-privileges:true
    secrets:
      - influxdb_write_user
      - influxdb_write_user_password
    environment:
      - BROKER=mqtt://broker
      - TOPIC=/modbus/secondary/+/+
      - MQTT_CLIENT_ID=mqtt-influx-secondary
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME_FILE=/run/secrets/influxdb_write_user
      - INFLUXDB_PASSWORD_FILE=/run/secrets/influxdb_write_user_password
      - INFLUXDB_DATABASE=${INFLUXDB_DATABASE}
      - TAGS={"bus":"secondary"}

  # Manualy run with
  # dc run historian-primary node index.js
  historian-primary:
    build: docker/historian
    depends_on:
      - broker
      - mongo
    restart: 'no'
    networks:
      - automation
      - egress
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGODB_URL=mongodb://mongo:27017/${MONGO_DATABASE}?authSource=admin
      - MONGODB_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGODB_PASSWORD_FILE=/run/secrets/mongo_root_password
      - BROKER=mqtt://broker
      - TOPIC=/modbus/main/{device}/history
      - MQTT_CLIENT_ID=historian-primary
      - COLLECTION=main

  # Manualy run with
  # dc run historian-secondary node index.js
  historian-secondary:
    build: docker/historian
    depends_on:
      - broker
      - mongo
    restart: 'no'
    networks:
      - automation
      - egress
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_username
      - mongo_root_password
    environment:
      - MONGODB_URL=mongodb://mongo:27017/${MONGO_DATABASE}?authSource=admin
      - MONGODB_USERNAME_FILE=/run/secrets/mongo_root_username
      - MONGODB_PASSWORD_FILE=/run/secrets/mongo_root_password
      - BROKER=mqtt://broker
      - TOPIC=/modbus/secondary/{device}/history
      - MQTT_CLIENT_ID=historian-secondary
      - COLLECTION=secondary

networks:
  # internal for the automation services - mqtt, node red, ah
  automation:
    internal: true
  # ingress proxy and exposed services
  ingress:
    internal: true
  # egress for containers needing access to external networks
  egress:
  # vpn, proxy
  dmz:
    ipam:
      config:
        - subnet: $INGRESS_SUBNET
  # internal networks for testing vpn access
  test-internal:
    internal: true
  test-internal2:
    internal: true

configs:
  grafana_config:
    file: ${GRAFANA_CONFIG_FILE}
  grafana_datasource_influxdb:
    file: ${GRAFANA_CONFIG_DATASOURCE_INFLUXDB_FILE}
  influxdb_config:
    file: ${INFLUXDB_CONFIG_FILE}
  ingressgen_template_nginx:
    file: ${INGRESSGEN_TEMPLATE_NGINX_FILE}
  vpn_template_peer:
    file: ${VPN_TEMPLATE_PEER_FILE}
  vpn_template_server:
    file: ${VPN_TEMPLATE_SERVER_FILE}
  main_power:
    file: ${MAIN_POWER_CONFIG_FILE}
  nodered_flows:
    file: ${NODERED_CONFIG_FLOWS_FILE}
  nodered_package:
    file: ${NODERED_CONFIG_PACKAGE_FILE}
  nodered_settings:
    file: ${NODERED_CONFIG_SETTINGS_FILE}
  secondary_power:
    file: ${SECONDARY_POWER_CONFIG_FILE}
  tetriary_power:
    file: ${TETRIARY_POWER_CONFIG_FILE}

secrets:
  influxdb_admin_user:
    file: ${INFLUXDB_SECRET_ADMIN_USER_FILE}
  influxdb_admin_password:
    file: ${INFLUXDB_SECRET_ADMIN_PASSWORD_FILE}
  influxdb_user:
    file: ${INFLUXDB_SECRET_USER_FILE}
  influxdb_user_password:
    file: ${INFLUXDB_SECRET_USER_PASSWORD_FILE}
  influxdb_read_user:
    file: ${INFLUXDB_SECRET_READ_USER_FILE}
  influxdb_read_user_password:
    file: ${INFLUXDB_SECRET_READ_USER_PASSWORD_FILE}
  influxdb_write_user:
    file: ${INFLUXDB_SECRET_WRITE_USER_FILE}
  influxdb_write_user_password:
    file: ${INFLUXDB_SECRET_WRITE_USER_PASSWORD_FILE}
  mongo_express_password:
    file: ${MONGO_EXPRESS_SECRET_PASSWORD_FILE}
  mongo_express_username:
    file: ${MONGO_EXPRESS_SECRET_USERNAME_FILE}
  mongo_root_password:
    file: ${MONGO_SECRET_ROOT_PASSWORD_FILE}
  mongo_root_username:
    file: ${MONGO_SECRET_ROOT_USERNAME_FILE}
  nodered_credentials_key:
    file: ${NODERED_SECRET_CREDENTIALS_KEY_FILE}
